#include <iostream>
#include <iomanip>
#include <math.h>
#include "input.h"
#include <string>
#include <vector>
#include <fstream>
using namespace std;


//Circle
double getCircumference(double radius);
double getRadius(double area);
double getDiameter(double radius);
double getAverageCircle(vector<double> vData);
void readDataFileStoreIntoCircleArray(vector<double>& vData);
void displayCircles(vector<double> vData);
void displaySortedCircles(vector<double> vData);
void displayCircleMenuOption(vector<double>& vData);



// Equilateral Triangle
double getSideLengthTriangle(double Area);
double getPerimeterTriangle(double sideLength);
double getHeightTriangle(double sideLength);
double getAverageTriangle(vector<double> vData);
void readInputDataFileStoreIntoTriangleArray(vector<double>& vData);
void displayTriangles(vector<double> vData);
void displaySortedTriangles(vector<double> vData);
void displayTrianglesMenuOption(vector<double>& vData);

//Square
double getSideLengthSquare(double Area);
double getPerimeterSquare(double sideLength);
double getDiagonalLengthSquare(double sideLength);
double getAverageSquare(vector<double> vData);
void readInputDataFileStoreIntoSquareArray(vector<double>& vData);
void displaySquares(vector<double> vData);
void displaySortedSquares(vector<double> vData);
void displaySquareMenu(vector<double>& vData);

//Pentagon
double getSideLengthPentagon(double Area);
double getPerimeterPentagon(double sidelength);
double getDiagonalLengthPentagon(double sideLength);
double getAveragePentagon(vector<double> vData);
void displayPentagonData(vector<double> vData);
void displaySortedPentagonData(vector<double> vData);
void readInputDataFileStoreIntoPentagonArray(vector<double>& vData);
void displayPentagonsMenuOption(vector<double> vData);

//Hexagon
double getSideLengthHexagon(double Area);
double getPerimeterHexagon(double sideLength);
double getAverageHexagon(vector<double> vData);
void displayHexagonData(vector<double> vData);
void displaySortedHexagonData(vector<double> vData);
void readInputDataFileStoreIntoHexagonArray(vector<double>& vData);
void displayHexagonMenu(vector<double>& vData);

const double PI = 3.14159;
int main()
{
	vector<double> vCircle;
	vector <double> vTriangle;
	vector <double> vSquare;
	vector <double> vPentagon;
	vector <double> vHexagon;
	do
	{
		system("cls");
		cout << "\nIn geometry, A two-dimensional (2D) can be defined as a flat figure or shape that has";
		cout << "\nonly two dimensions - length and width. 2D shapes do not have any thickness.";

		cout << "\nCMPR120 Exam#2 - 2D Geometry by DT(11 - 18 - 2023)";
		cout << "\n====================================================================================";
		cout << "\n\tA.Circles";
		cout << "\n\tB.Equilateral Triangles";
		cout << "\n\tC.Squares";
		cout << "\n\tD.Regular Pentagons";
		cout << "\n\tE.Regular Hexagons";
		cout << "\n------------------------------------------------------------------------------------";
		cout << "\n\tX. Exit";
		cout << "\n====================================================================================";

		switch (toupper((inputChar("\n\tOption: ", static_cast<string>("ABCDEX")))))
		{
		case 'X': exit(0);
		case 'A':displayCircleMenuOption(vCircle); break;
		case 'B':displayTrianglesMenuOption(vTriangle); break;
		case 'C':displaySquareMenu(vSquare); break;
		case 'D':displayPentagonsMenuOption(vPentagon); break;
		case 'E':displayHexagonMenu(vHexagon); break;
		}

		system("pause");

	} while (true);

	return 0;
}
double getCircumference(double radius)
{
	return 2 * PI * radius;
}
double getRadius(double area)
{
	return sqrt(area / PI);
}
double getDiameter(double radius)
{
	return 2 * radius;
}
void readDataFileStoreIntoCircleArray(vector<double>& vData)
{
	vData.clear();
	ifstream inputFile;
	string filename = inputString("\nEnter the data file name(Circles.txt): ", false);
	inputFile.open(filename);
	if (inputFile.fail())
	{
		cout << "\nERROR: file " << filename << " cannot be found.\n";
		return;
	}
	double value = 0.0;
	while (inputFile >> value)
	{
		vData.push_back(value);
	}
	inputFile.close();

	cout << "Data have been read into the vector.\n";
}

double getAverageCircle(vector<double> vData)
{
	if (vData.empty())
	{
		cout << "\nERROR: empty vector\n";
		return 0.1;
	}
	double sum = 0;
	for (int i = 0; i < vData.size(); i++)
	{
		sum += vData.at(i);
	}
	return sum / vData.size();

}
double findLargest(vector<double> vData)
{
	double largest = vData.at(0);
	int largestIndex = 0;
	for (int i = 0; i < vData.size(); i++)
	{
		
		if (vData.at(i) > largest)
		{
			largest = vData.at(i);
			largestIndex = i;
			
		}
		

	}
	return largestIndex;
}
double findSmallest(vector<double> vData)
{
	double smallest=vData.at(0);
	int smallestIndex = 0;
	for (int i = 0; i < vData.size(); i++)
	{
		if (vData.at(i) < smallest)
		{
			smallest = vData.at(i);
			smallestIndex = i;
		}
		
	}
	return smallestIndex;
}
void displayCircles(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR: empty vector\n";
		return;
	}
	cout << "\nUnsorted array of Circles\n\n";
	cout << "index" <<setw(21) <<right << "Area" << setw(20) << right << "Circumference" << setw(20) << right << " Diameter" << setw(21) << right << "Radius\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right  << i << setw(21) << right << vData.at(i) << setw(20) << right << getCircumference(getRadius(vData.at(i))) << setw(20) << right << getDiameter(getRadius(vData.at(i))) << setw(20) << right << getRadius(vData.at(i));

		

		
	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageCircle(vData) << setw(20)<<right<< getCircumference(getRadius(getAverageCircle(vData))) << setw(20) << right << getDiameter(getRadius(getAverageCircle(vData))) << setw(20) << right<< getRadius(getAverageCircle(vData));
	cout << "\n*  The smallest circle is found at index " << static_cast<int>(findSmallest(vData));
	cout << "\n** The largest circle is found at index   " << static_cast<int> (findLargest(vData)) << "\n";


}
void displaySortedCircles(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR:Empty vector.\n";
	}

	sort(vData.begin(), vData.end());

	cout << "\nsorted array of Circles\n\n";
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Circumference" << setw(20) << right << " Diameter" << setw(21) << right << "Radius\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getCircumference(getRadius(vData.at(i))) << setw(20) << right << getDiameter(getRadius(vData.at(i))) << setw(20) << right << getRadius(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageCircle(vData) << setw(20) << right << getCircumference(getRadius(getAverageCircle(vData))) << setw(20) << right << getDiameter(getRadius(getAverageCircle(vData))) << setw(20) << right << getRadius(getAverageCircle(vData));
	cout << "\n*  The smallest circles is found at index " <<  0 << "\n";
	cout << "\n** The largest circle is found at index   " << vData.size() - 1 << "\n";
}

void displayCircleMenuOption(vector<double>& vData)
{
	do
	{
		system("cls");
		cout << "\nA circle is a 2D shape that is made up of a curved line. It's round, and all points";
		cout << "\non the curved line are an equal distance from the center point.";
		cout << "\nArray of Circles Menu";
		cout << "\n====================================================================================";
		cout << "\n\t1. Read data file";
		cout << "\n\t2. Display unsorted data";
		cout << "\n\t3. Display sorted data in ascending order";
		cout << "\n------------------------------------------------------------------------------------";
		cout << "\n\t0. return";
		cout << "\n====================================================================================";

		switch (inputInteger("\n\tOption: ", 0, 3))
		{
		case 0: return; break;
		case 1: readDataFileStoreIntoCircleArray(vData); break;
		case 2: displayCircles(vData); break;
		case 3: displaySortedCircles(vData); break;
		}

		system("pause");

	} while (true);
}
double getSideLengthTriangle(double area)
{
	return sqrt((4.0 * area) / sqrt(3.0));
}
double getPerimeterTriangle(double side)
{
	return 3.0 * side;
}
double getHeightTriangle(double side)
{
	return sqrt(pow(side, 2) - ((1.0 / 4.0) * pow(side, 2)));
}
void readInputDataFileStoreIntoTriangleArray(vector<double>& vData)
{
	vData.clear();
	ifstream inputfile;
	string filename = inputString("\nEnter the data file name(Triangles.txt): ", false);
	inputfile.open(filename);

	if (inputfile.fail())
	{
		cout << "\nERROR: file " << filename << "cannot be found.\n";
		return;
	}

	double value = 0.0;

	while (inputfile >> value)
	{
		vData.push_back(value);
	}

	inputfile.close();

	cout << "\nData have been read into the vector.\n";
}

double getAverageTriangle(vector<double> vData)
{
	if (vData.empty())
	{
		cout << "\nERROR: vector is empty.\n";
		return 0.0;
	}
	double sum = 0.0;

	for (int i = 0; i < vData.size();i++)
	{
		sum += vData.at(i);
	}
	return sum / vData.size();
}

void displayTriangles(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	cout << "\nUnsorted array of Triangles\n\n";
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << " Height" << setw(21) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterTriangle(getSideLengthTriangle(vData.at(i))) << setw(20) << right << getHeightTriangle(getSideLengthTriangle(vData.at(i))) << setw(20) << right << getSideLengthTriangle(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageTriangle(vData) << setw(20) << right << getPerimeterTriangle(getSideLengthTriangle(getAverageTriangle(vData))) << setw(20) << right << getHeightTriangle(getSideLengthTriangle(getAverageTriangle(vData))) << setw(20) << right << getSideLengthTriangle(getAverageTriangle(vData));
	cout << "\n*  The smallest triangle is found at index " << static_cast<int>(findSmallest(vData));
	cout << "\n** The largest triangle is found at index " << static_cast<int> (findLargest(vData)) << "\n";

}
void displaySortedTriangles(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	sort(vData.begin(), vData.end());
	cout << "\nsorted array of Triangles\n\n";
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << " Height" << setw(21) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterTriangle(getSideLengthTriangle(vData.at(i))) << setw(20) << right << getHeightTriangle(getSideLengthTriangle(vData.at(i))) << setw(20) << right << getSideLengthTriangle(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageTriangle(vData) << setw(20) << right << getPerimeterTriangle(getSideLengthTriangle(getAverageTriangle(vData))) << setw(20) << right << getHeightTriangle(getSideLengthTriangle(getAverageTriangle(vData))) << setw(20) << right << getSideLengthTriangle(getAverageTriangle(vData));
	cout << "\n*  The smallest triangle is found at index " << 0 << "\n";
	cout << "\n** The largest triangle is found at index " << vData.size()-1 << "\n";

}

void displayTrianglesMenuOption(vector<double>& vData)
{
	do
	{
		system("cls");
		cout << "\nAn quilateral triangle is a 2D triangle shape whose all three sides are of equal length.\n\n";
		cout << "\nArray of Triangles Menu";
		cout << "\n====================================================================================";
		cout << "\n\t1. Read data file";
		cout << "\n\t2. Display unsorted data";
		cout << "\n\t3. Display sorted data in ascending order";
		cout << "\n------------------------------------------------------------------------------------";
		cout << "\n\t0. return";
		cout << "\n====================================================================================";

		switch (inputInteger("\n\tOption: ", 0, 3))
		{
		case 0: return; break;
		case 1: readInputDataFileStoreIntoTriangleArray(vData); break;
		case 2: displayTriangles(vData); break;
		case 3: displaySortedTriangles(vData); break;
		}

		system("pause");

	} while (true);
}

double getSideLengthSquare(double Area)
{
	return sqrt(Area);
}
double getPerimeterSquare(double sideLength)
{
	return 4.0 * sideLength;
}
double getDiagonalLengthSquare(double sideLength)
{
	return sqrt(2.0) * sideLength;
}

void readInputDataFileStoreIntoSquareArray(vector<double>& vData)
{
	{
		vData.clear();
		ifstream inputfile;
		string filename = inputString("\nEnter the file name(Squares.txt): ", false);

		inputfile.open(filename);
		if (inputfile.fail())
		{
			cout << "\nThe file " << filename << " cannot be found\n";
		}

		double value = 0.0;

		while (inputfile >> value)
		{
			vData.push_back(value);
		}

		inputfile.close();

		cout << "\nData have been read into vectors.\n";
	}
}
double getAverageSquare(vector<double> vData)
{
	if (vData.empty())
	{
		cout << "\nERROR. the vector is empty\n";
	}

	double sum = 0.0;
	for (int i = 0; i < vData.size(); i++)
	{
		sum += vData.at(i);
	}
	return sum / vData.size();

}
void displaySquares(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	cout << "\nUnsorted array of Squares\n\n";
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << "Diagonal" << setw(21) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterSquare(getSideLengthSquare(vData.at(i))) << setw(20) << right << getDiagonalLengthSquare(getSideLengthSquare(vData.at(i))) << setw(20) << right << getSideLengthSquare(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageSquare(vData) << setw(20) << right << getPerimeterSquare(getSideLengthSquare(getAverageSquare(vData))) << setw(20) << right << getDiagonalLengthSquare(getSideLengthSquare(getAverageSquare(vData))) << setw(20) << right << getSideLengthSquare(getAverageSquare(vData));
	cout << "\n*  The smallest square is found at index " << static_cast<int>(findSmallest(vData));
	cout << "\n** The largest square is found at index " << static_cast<int> (findLargest(vData)) << "\n";
}
void displaySortedSquares(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	cout << "\nsorted array of Squares\n\n";
	sort(vData.begin(), vData.end());
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << "Diagonal" << setw(21) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterSquare(getSideLengthSquare(vData.at(i))) << setw(20) << right << getDiagonalLengthSquare(getSideLengthSquare(vData.at(i))) << setw(20) << right << getSideLengthSquare(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageSquare(vData) << setw(20) << right << getPerimeterSquare(getSideLengthSquare(getAverageSquare(vData))) << setw(20) << right << getDiagonalLengthSquare(getSideLengthSquare(getAverageSquare(vData))) << setw(20) << right << getSideLengthSquare(getAverageSquare(vData));
	cout << "\n*  The smallest square is found at index " << 0 << "\n";
	cout << "\n** The largest square is found at index " << vData.size()-1 << "\n";
}
void displaySquareMenu(vector<double>& vData)
{
	do
	{
		system("cls");
		cout << "\nA square is a 2D shape with four equal sides and four equal right angles.";
		cout << "\nArray of Squares Menu";
		cout << "\n====================================================================================";
		cout << "\n\t1. Read data file";
		cout << "\n\t2. Display unsorted data";
		cout << "\n\t3. Display sorted data in ascending order";
		cout << "\n------------------------------------------------------------------------------------";
		cout << "\n\t0. return";
		cout << "\n====================================================================================";

		switch (inputInteger("\n\tOption: ", 0, 3))
		{
		case 0: return; break;
		case 1: readInputDataFileStoreIntoSquareArray(vData); break;
		case 2: displaySquares(vData); break;
		case 3: displaySortedSquares(vData); break;
		}

		system("pause");

	} while (true);
}
double getSideLengthPentagon(double Area)
{
	return 2.0 * ((sqrt(Area)) / sqrt((sqrt(5.0 * (5.0 + 2.0 * sqrt(5.0))))));
}
double getPerimeterPentagon(double sidelength)
{
	return 5.0 * sidelength;
}
double getDiagonalLengthPentagon(double sideLength)
{
	return ((1.0 + sqrt(5.0)) / 2.0) * sideLength;
}
void readInputDataFileStoreIntoPentagonArray(vector<double>& vData)
{
	vData.clear();
	ifstream inputfile;
	string filename = inputString("\nEnter the file name(Pentagons.txt): ", false);

	inputfile.open(filename);

	if (inputfile.fail())
	{
		cout << "The file " << filename << " cannot be found.\n";
	}

	double value = 0.0;

	while (inputfile >> value)
	{
		vData.push_back(value);
	}
	inputfile.close();
	cout << "\nData have been read into vectors\n";
}

double getAveragePentagon(vector<double> vData)
{
	if (vData.empty())
	{
		cout << "\nERROR: The vector is empty\n";
	}

	double sum = 0.0;

	for (int i = 0; i < vData.size(); i++)
	{
		sum += vData.at(i);
	}
	return sum / vData.size();
}
void displayPentagonData(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	cout << "\nUnsorted array of Pentagon\n\n";
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << "Diagonal" << setw(21) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterPentagon(getSideLengthPentagon(vData.at(i))) << setw(20) << right << getDiagonalLengthPentagon(getSideLengthPentagon(vData.at(i))) << setw(20) << right << getSideLengthPentagon(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAveragePentagon(vData) << setw(20) << right << getPerimeterPentagon(getSideLengthPentagon(getAveragePentagon(vData))) << setw(20) << right << getDiagonalLengthPentagon(getSideLengthPentagon(getAveragePentagon(vData))) << setw(20) << right << getSideLengthPentagon(getAveragePentagon(vData));
	cout << "\n*  The smallest square is found at index " << static_cast<int>(findSmallest(vData));
	cout << "\n** The largest square is found at index " << static_cast<int> (findLargest(vData)) << "\n";
}
void displaySortedPentagonData(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	sort(vData.begin(), vData.end());
	cout << "\nsorted array of Pentagon\n\n";
	
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << "Diagonal" << setw(21) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterPentagon(getSideLengthPentagon(vData.at(i))) << setw(20) << right << getDiagonalLengthPentagon(getSideLengthPentagon(vData.at(i))) << setw(20) << right << getSideLengthPentagon(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAveragePentagon(vData) << setw(20) << right << getPerimeterPentagon(getSideLengthPentagon(getAveragePentagon(vData))) << setw(20) << right << getDiagonalLengthPentagon(getSideLengthPentagon(getAveragePentagon(vData))) << setw(20) << right << getSideLengthPentagon(getAveragePentagon(vData));
	cout << "\n*  The smallest square is found at index " << 0 << "\n";
	cout << "\n** The largest square is found at index " << vData.size()-1 << "\n";
}
void displayPentagonsMenuOption(vector<double> vData)
{
	do
	{
		system("cls");
		cout << "\nA regular pentagon is a closed 2D polygon shape made up of five straight equal sides.";
		cout << "\nArray of Pentagons Menu";
		cout << "\n====================================================================================";
		cout << "\n\t1. Read data file";
		cout << "\n\t2. Display unsorted data";
		cout << "\n\t3. Display sorted data in ascending order";
		cout << "\n------------------------------------------------------------------------------------";
		cout << "\n\t0. return";
		cout << "\n====================================================================================";

		switch (inputInteger("\n\tOption: ", 0, 3))
		{
		case 0: return; break;
		case 1: readInputDataFileStoreIntoPentagonArray(vData); break;
		case 2: displayPentagonData(vData); break;
		case 3: displaySortedPentagonData(vData); break;
		}

		system("pause");

	} while (true);
}
double getSideLengthHexagon(double Area)
{
	return sqrt((2.0 * Area) / (3.0 * sqrt(3.0)));
}
double getPerimeterHexagon(double sideLength)
{
	return 6 * sideLength;
}
void readInputDataFileStoreIntoHexagonArray(vector<double>& vData)
{
	vData.clear();

	fstream inputFile;

	string filename = inputString("\nEnter the file name(Hexagons.txt): ", false);

	inputFile.open(filename);

	if (inputFile.fail())
	{
		cout << "The file " << filename << " cannot be found.\n";
	}

	double value;
	while (inputFile >> value)
	{
		vData.push_back(value);
	}
	inputFile.close();
	cout << "Data have been read into vectors.\n";
}
double getAverageHexagon(vector<double> vData)
{
	if (vData.empty())
	{
		cout << "\nERROR. The vector is empty\n";
	}

	double sum = 0.0;

	for (int i = 0; i < vData.size(); i++)
	{
		sum += vData.at(i);
	}
	return sum / vData.size();
}
void displayHexagonData(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	cout << "\nUnsorted array of Hexagon\n\n";
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterHexagon(getSideLengthHexagon(vData.at(i))) << setw(20) << right << getSideLengthHexagon(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageHexagon(vData) << setw(20) << right << getPerimeterHexagon(getSideLengthHexagon(getAverageHexagon(vData))) <<  setw(20) << right << getSideLengthHexagon(getAverageHexagon(vData));
	cout << "\n*  The smallest square is found at index " << static_cast<int>(findSmallest(vData));
	cout << "\n** The largest square is found at index " << static_cast<int> (findLargest(vData)) << "\n";
}

void displaySortedHexagonData(vector<double> vData)
{
	cout << showpoint << fixed << setprecision(5);
	if (vData.empty())
	{
		cout << "\nERROR. vector is empty\n";
	}
	sort(vData.begin(), vData.end());
	cout << "\nUnsorted array of Hexagon\n\n";
	cout << "index" << setw(21) << right << "Area" << setw(20) << right << "Perimeter" << setw(20) << right << "Side Length\n";
	cout << "-------  ----------------- ------------------- -------------------";
	for (int i = 0; i < vData.size(); i++)
	{

		cout << "\n" << setw(5) << right << i << setw(21) << right << vData.at(i) << setw(20) << right << getPerimeterHexagon(getSideLengthHexagon(vData.at(i))) << setw(20) << right << getSideLengthHexagon(vData.at(i));




	}
	cout << "\n-------  ----------------- ------------------- -------------------";
	cout << "\nAverage" << setw(19) << right << getAverageHexagon(vData) << setw(20) << right << getPerimeterHexagon(getSideLengthHexagon(getAverageHexagon(vData))) << setw(20) << right << getSideLengthHexagon(getAverageHexagon(vData));
	cout << "\n*  The smallest square is found at index " << 0 << "\n";
	cout << "\n** The largest square is found at index " << vData.size()-1 << "\n";
}

void displayHexagonMenu(vector<double>& vData)
{
	do
	{
		system("cls");
		cout << "\nA regular hexagon is a closed 2D polygon shape made up of six straight equal sides.";
		cout << "\nArray of Hexagons Menu";
		cout << "\n====================================================================================";
		cout << "\n\t1. Read data file";
		cout << "\n\t2. Display unsorted data";
		cout << "\n\t3. Display sorted data in ascending order";
		cout << "\n------------------------------------------------------------------------------------";
		cout << "\n\t0. return";
		cout << "\n====================================================================================";

		switch (inputInteger("\n\tOption: ", 0, 3))
		{
		case 0: return; break;
		case 1: readInputDataFileStoreIntoHexagonArray(vData); break;
		case 2: displayHexagonData(vData); break;
		case 3: displaySortedHexagonData(vData); break;
		}

		system("pause");

	} while (true);
}
