#include <iostream>
#include <iomanip>
#include <math.h>
#include <cctype>
#include <string>
#include <vector>
#include <fstream>
#include "input.h"
#include <sstream>


void readAndStore( vector<string>& vLine);
void displayOutput(vector <string>& vLine);
void outputStatistics(vector<string>& vLine);
using namespace std;
int main()
{
	vector<string> text;
	
	do
	{
		system("cls");
		cout << "\n\tLife of " +string(1,char(227));
		cout << "\n\tPi (often represented by the lower-case Greek letter "+string(1,char(227))+ " one of the most well - known";
		cout << "\n\tmathematical constants, is the ratio of a circle's circumference to its diameter.";
		cout << "\n\tFor any circle, the distance around the edge is a little more than three times";
		cout << "\n\tthe distance across.\n";
		cout << "\n\tCMPR120 - Exam #3 - Strings by DT (November 30th, 2023)";
		cout << "\n\t"+string(60,char(205));
		cout << "\n\tA. Read string data file and store into a dynamic array";
		cout << "\n\tB. Display ALL lines of strings";
		cout << "\n\tC. Output the statistics of ALL line of strings";
		cout << "\n\t" + string(60,char(196));
		cout << "\n\tX.Exit the program";
		cout << "\n\t"+string(60,char(205));

		switch (toupper((inputChar("\n\tOption: ", static_cast<string>("ABCX")))))
		{
		case 'X': exit(0); break;
		case 'A': readAndStore(text); break;
		case 'B': displayOutput(text); break;
		case 'C': outputStatistics(text); break;
		default:cout << "\n\tinvalid option.Try again"; break;
			
		}
		system("pause");
	} while (true);
	return EXIT_SUCCESS;
}
void readAndStore(vector<string>& vLine)
{
	vLine.clear();
	ifstream inputFile;
	string filename = inputString("\n\tEnter the name of the file(LOP.txt): ", true);
	inputFile.open(filename);
	if (inputFile.fail())
	{
		cout << "\n\t" << filename << " cannot be found\n";
		return;
	}
	string word;
	while (getline(inputFile,word))
	{
		vLine.push_back(word);
	}
	
	inputFile.close();
	cout << "\n\tData have been read into a dynamic array\n";
	

}
void displayOutput(vector<string>& vLine)
{
	if (vLine.empty())
	{
		cout << "\n\tERROR: Vector is empty\n";
		return;
	}
	system("cls");
	int numLines = 0;
	for (int i = 0; i < vLine.size(); i++)
	{
		cout << vLine.at(i) << "\n";
		numLines++;
	}
	cout << "\n\nTotal of lines: " << numLines << "\n";
	
}

void countCharacters(vector<string>& vLine)
{ 
	int countA_ZVowels[26] = { 0 };
	int counta_zVowels[26] = { 0 };
	int countA_ZConsonants[26] = { 0 };
	int counta_zConsonants[26] = { 0 };
	int countTotalConsonants = 0;
	int countTotalVowels = 0;
	int count0_9[10] = { 0 };
	int totalNumbers = 0;
	int totalSpaces = 0;
	int totalPunctuation = 0;
	int totalOthers = 0;
	for (const string& line : vLine)
	{
		for (int i = 0; i < line.length(); i++)
		{
			if (isalpha(line[i]))
			{
				if (line[i] != 'U' && line[i] != 'E' && line[i] != 'O' && line[i] != 'A' && line[i] != 'I' &&
					line[i] != 'u' && line[i] != 'e' && line[i] != 'o' && line[i] != 'a' && line[i] != 'i')
				{
					countTotalConsonants++;
					if (isupper(line[i]))
					{
						 countA_ZConsonants[line[i] - 'A']++;
					}
					else 
					{
					     counta_zConsonants[line[i] - 'a']++;
					}
				}
				else if (line[i] == 'U' || line[i] == 'E' || line[i] == 'O' || line[i] == 'A' || line[i] == 'I' ||
					line[i] == 'u' || line[i] == 'e' || line[i] == 'o' || line[i] == 'a' || line[i] == 'i')
				{
					countTotalVowels++;
					if (isupper(line[i]))
					{
						 countA_ZVowels[line[i] - 'A']++;
					}
					else
					{
						counta_zVowels[line[i] - 'a']++;
					}
				}

			}
			else if (isdigit(line[i]))
			{
				totalNumbers++;
				count0_9[line[i] - '0']++;
			}
			else if (isspace(line[i]))
			{
				totalSpaces++;
			}
			else if (ispunct(line[i]))
			{
				totalPunctuation++;
			}
			else
			{
				totalOthers++;
			}
		}
	}
	cout << "\n\tTotal # of Vowels           " << "\t\t:" << countTotalVowels;
	for (int i = 0; i < 26; i++)
	{
		if (countA_ZVowels[i] != 0)
			cout << "\n\t\t\t\t" << char('A' + i) << " : " << countA_ZVowels[i];
	}
	for (int i = 0; i < 26; i++)
	{
		if (counta_zVowels[i] != 0)
			cout << "\n\t\t\t\t" << char('a' + i) << " : " << counta_zVowels[i];
	}
	cout << "\n\tTotal # of consonant        " << "\t\t:" << countTotalConsonants;
	for (int i = 0; i < 26; i++)
	{
		if (countA_ZConsonants[i] != 0)
			cout << "\n\t\t\t\t" << char('A' + i) << " : " << countA_ZConsonants[i];
	}
	for (int i = 0; i < 26; i++)
	{
		if (counta_zConsonants[i] != 0)
			cout << "\n\t\t\t\t" << char('a' + i) << " : " << counta_zConsonants[i];
	}
	cout << "\n\tTotal # of digits          : " << "\t\t:" << totalNumbers;
	for (int i = 0; i < 10; i++)
	{
		if (count0_9[i] != 0)
		{
			cout << "\n\t\t\t\t" << char('0' + i) << " : " << count0_9[i];
		}
	}
	cout << "\n\tTotal # of spaces            " << "\t\t:" << totalSpaces;
	cout << "\n\tTotal # of punctuation       " << "\t\t:" << totalPunctuation;
	cout << "\n\tTotal # of other characters  " << "\t\t:" << totalOthers << "\n";
}
			
		
	


void outputStatistics(vector<string> &vLine)
{
	cout << "\n\tOutput to C-console, F-File, R-Return: ";
	
	switch (toupper(inputChar("", static_cast <string> ("CFR"))))
	{
		
	case 'R': return; break;
	case 'C':
	{
		if (vLine.empty())
		{
			cout << "\n\tERROR.Vector is empty\n";
			return;
		}
		system("cls");
		int totalCharCount = 0;
		for (const string& line : vLine)
		{
			totalCharCount += line.size();
		}
		cout << "\n\tStatistics";
		cout << "\n\t-------------------------------------------------------";
		cout << "\n\tTotal # characters(s)   " << "\t\t:" << totalCharCount;
		cout << "\n";
		countCharacters(vLine);
		
	}
	break;
	case'F': 
	{
		if (vLine.empty())
		{
			cout << "\n\tVector is empty\n";
			return;
		}
		int totalCharCount = 0;
		for (const string& line : vLine)
		{
			totalCharCount += line.size();
		}int countA_ZVowels[26] = { 0 };
		int counta_zVowels[26] = { 0 };
		int countA_ZConsonants[26] = { 0 };
		int counta_zConsonants[26] = { 0 };
		int countTotalConsonants = 0;
		int countTotalVowels = 0;
		int count0_9[10] = { 0 };
		int totalNumbers = 0;
		int totalSpaces = 0;
		int totalPunctuation = 0;
		int totalOthers = 0;
		for (const string& line : vLine)
		{
			for (int i = 0; i < line.length(); i++)
			{
				if (isalpha(line[i]))
				{
					if (line[i] != 'U' && line[i] != 'E' && line[i] != 'O' && line[i] != 'A' && line[i] != 'I' &&
						line[i] != 'u' && line[i] != 'e' && line[i] != 'o' && line[i] != 'a' && line[i] != 'i')
					{
						countTotalConsonants++;
						if (isupper(line[i]))
						{
							countA_ZConsonants[line[i] - 'A']++;
						}
						else
						{
							counta_zConsonants[line[i] - 'a']++;
						}
					}
					else if (line[i] == 'U' || line[i] == 'E' || line[i] == 'O' || line[i] == 'A' || line[i] == 'I' ||
						line[i] == 'u' || line[i] == 'e' || line[i] == 'o' || line[i] == 'a' || line[i] == 'i')
					{
						countTotalVowels++;
						if (isupper(line[i]))
						{
							countA_ZVowels[line[i] - 'A']++;
						}
						else
						{
							counta_zVowels[line[i] - 'a']++;
						}
					}

				}
				else if (isdigit(line[i]))
				{
					totalNumbers++;
					count0_9[line[i] - '0']++;
				}
				else if (isspace(line[i]))
				{
					totalSpaces++;
				}
				else if (ispunct(line[i]))
				{
					totalPunctuation++;
				}
				else
				{
					totalOthers++;
				}
			}
		}
		ofstream outputFile;
		
		string outputFilename = inputString("\n\tEnter the name of the file you want to write: ", true);

		outputFile.open(outputFilename);
		if (outputFile.fail())
		{
			cout << "\n\tCannot open the file\n";
			return;
		}
		outputFile << " \n\tStatistics";
		outputFile << " \n\t-------------------------------------------------------";
		outputFile << " \n\tTotal # characters(s)   " << "\t\t:" << totalCharCount;
		outputFile << " \n";
		outputFile << "\n\tTotal # of Vowels           " << "\t\t:" << countTotalVowels;
		for (int i = 0; i < 26; i++)
		{
			if (countA_ZVowels[i] != 0)
				outputFile << "\n\t\t\t\t" << char('A' + i) << " : " << countA_ZVowels[i];
		}
		for (int i = 0; i < 26; i++)
		{
			if (counta_zVowels[i] != 0)
				outputFile << "\n\t\t\t\t" << char('a' + i) << " : " << counta_zVowels[i];
		}
		outputFile << "\n\tTotal # of consonant        " << "\t\t:" << countTotalConsonants;
		for (int i = 0; i < 26; i++)
		{
			if (countA_ZConsonants[i] != 0)
				outputFile << "\n\t\t\t\t" << char('A' + i) << " : " << countA_ZConsonants[i];
		}
		for (int i = 0; i < 26; i++)
		{
			if (counta_zConsonants[i] != 0)
				outputFile << "\n\t\t\t\t" << char('a' + i) << " : " << counta_zConsonants[i];
		}
		outputFile << "\n\tTotal # of digits          : " << "\t\t:" << totalNumbers;
		for (int i = 0; i < 10; i++)
		{
			if (count0_9[i] != 0)
			{
				outputFile << "\n\t\t\t\t" << char('0' + i) << " : " << count0_9[i];
			}
		}
		outputFile << "\n\tTotal # of spaces            " << "\t\t:" << totalSpaces;
		outputFile << "\n\tTotal # of punctuation       " << "\t\t:" << totalPunctuation;
		outputFile << "\n\tTotal # of other characters  " << "\t\t:" << totalOthers << "\n";
		outputFile.close();
		cout << "\n\tConsole output is successfully written into file\n";
		outputFile.clear();
	}
	}

}
