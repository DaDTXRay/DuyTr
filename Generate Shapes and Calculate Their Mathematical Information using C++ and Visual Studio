// Name: Duc Tran
// Date: 10/07/2023
// Description: 3D Geometric Calculation
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
int main()
{
	double const PI = 3.1415926535898;
	int num;
	cout << "CMPR120 Exam#1 - 3D Geometric Calculator by Duc Tran (October 7th. 2023)\n ";
	cout << "\nSpecify a number (5...10) of significant digits for output format floating-point value ";
	cin >> num;
	if (num < 5 || num >10)
	{
		cout << "WARNING: Out-of-range input. It will be defaulted to 5.\n\n";
		cout << showpoint << fixed << setprecision(5);
	}
	else
	{
		cout << showpoint << fixed << setprecision(num) << "\n\n";
	}
	cout << " In geometry, a three dimensional (3D) shape can be defined as a solid figure or an object\n";
	cout << " or shape that has three dimensions - length, width, and height. Unlike two dimensional\n ";
	cout << "shapes, three - dimensional shapes have height, which is the same as thickness or depth.\n";
	cout << " All three dimensional figures occupy space, which is measured in terms of volume.\n\n";
	cout << "\tMenu\n";
	cout << "========================================================================================\n";
	cout << "\t1. Sphere - round ball\n";
	cout << "\t2. Tetrahedron - triangular pyramid\n";
	cout << "\t3. Pentahedron - square pyramid\n";
	cout << "\t4. Polyhedron - rectangular prism\n";
	cout << "\t5. Torus - doughnut\n";
	cout << "\t6. Hemisphere - one half of a sphere\n";
	cout << "----------------------------------------------------------------------------------------\n";
	cout << "\t11. Interactive input ALL shapes\n";
	cout << "\t12. Auto - randomized input ALL shapes\n";
	cout << "----------------------------------------------------------------------------------------\n";
	cout << "\t0. Exit Program\n";
	cout << "========================================================================================\n";
	int option;
	cout << "\tOption: ";
	cin >> option;
	double areaSph, volSph;
	double areaTet, volTet;
	double areaPen, volPen;
	double areaPo, volPo;
	double areaTo, volTo;
	double areaHemSph, volHemSph;
	switch (option)
	{
	default: cout << "ERROR: Invalid Option . Please try again\n"; break;
	case 0: return -1; break;
	case 1: //sphere
		cout << "            . . .\n";
		cout << "        .   1 1 1 111\n";
		cout << "     .           1 1 111\n";
		cout << "   .               1 1 111\n";
		cout << "  .                 1 1 111\n";
		cout << " .                   1 1 111\n";
		cout << "..                   1 1 1111     Sphere - a round object with the same distance\n";
		cout << "..                   1 1 1111     (radius)from its surface to its center\n";
		cout << "..                   1 1 1111\n";
		cout << " ..                1 1 1 111\n";
		cout << "  ...           1 1 1 1 111\n";
		cout << "   ....  . 1 1 1 1 1 1 111\n";
		cout << "     ..1 1 1 1 1 1 1 111\n";
		cout << "        1 1 1 1 1 111\n";
		cout << "            . . .\n\n";
		cout << "1) Input of a sphere\n";
		cout << "------------------------------------------------------------------------------------\n";
		double radius;
		//Input
		cout << "\tEnter a radius of a sphere: ";
		cin >> radius;
		//Input Validation
		if (radius <= 0)
		{
			cout << "ERROR: Invalid Input. Radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of a sphere\n";
			cout << "-------------------------------------------------------------------------------------\n";
		//Process
			areaSph = 4 * PI * pow(radius, 2);
			volSph = (4 * PI * pow(radius, 3)) / 3;
		//Output
			cout << "\tRadius        (r) = " << radius << "\n";
			cout << "\tDiameter      (d) = " << radius * 2 << "\n";
			cout << "\tSurface Area  (A) = " << areaSph << "\n";
			cout << "\tVolume        (V) = " << volSph << "\n";
		}
		break;

	case 2: //Tetrahedron

		cout << "                            |\n";
		cout << "                           /|2\n";
		cout << "                          / |222\n";
		cout << "                        /   |2222\n";
		cout << "                      /     |222222\n";
		cout << "                     /      |2222222\n";
		cout << "                   /        |22222222       Tetrahedron - a triangular pyramid with\n";
		cout << "                  /         +2222222222     four faces, edges of equal lengthand angles\n";
		cout << "                /         ..222222222222    of equal size\n";
		cout << "               /      ...........222222222\n";
		cout << "             /    ...................2222222\n";
		cout << "            / ...........................2222\n";
		cout << "          /...................................2\n\n";
		double tetlength;
		//Input
		cout << "2) Input of a Tetrahedron\n";
		cout << "-----------------------------------------------------------------------------------------\n";
		cout << "Enter an edge length (l) of a triangular pyramid: ";
		cin >> tetlength;
		//Input Validation
		if (tetlength <= 0)
		{
			cout << "ERROR: Invalid Input. Edge length cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of a Tetrahedron\n";
			cout << "-----------------------------------------------------------------------------------------\n";
		//Process
			areaTet = sqrt(3) * pow(tetlength, 2);
			volTet = (sqrt(2) * pow(tetlength, 3)) / 12;
		//Output
			cout << "\tEdge length    (l) = " << tetlength << "\n";
			cout << "\tHeight         (h) = " << (sqrt(6) * tetlength) / 3 << "\n";
			cout << "\tSurface Area   (A) = " << areaTet << "\n";
			cout << "\tVolume         (V) = " << volTet << "\n";
		}
		break;

	case 3://Pentahedron
		cout << "    ++++++++++++++++++++++++++3\n";
		cout << "    | ++++++++++++++++++++++/33\n";
		cout << "    |   ++++++++++++++++++/3333\n";
		cout << "    |     ++++++++++++++/333333\n";
		cout << "    |       ++++++++++/33333333\n";
		cout << "    |         ++++++/3333333333\n";
		cout << "    |           ++/333333333333    Pentahedron - a pyramid with square base \n";
		cout << "    |           ++3333333333333    and four triangular faces that are joined\n";
		cout << "    |           /.+333333333333    at a vertex\n";
		cout << "    |         /.....+3333333333\n";
		cout << "    |       /.........+33333333\n";
		cout << "    |     /.............+333333\n";
		cout << "    |   /.................+3333\n";
		cout << "    | /.....................+33\n";
		cout << "    |.........................3\n\n";
		cout << "3) Input of a pentahedron\n";
		cout << "----------------------------------------------------------------------------------------\n";
		double penlength, penheight;
		//Input
		cout << "Enter a edge length (l) of a square pyramid: ";
		cin >> penlength;
		//Input Validation
		if (penlength <= 0)
		{
			cout << "ERROR: Invalid Input. Edge length cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		penheight;
		cout << "Enter the height: ";
		cin >> penheight;
		if (penheight <= 0)
		{
			cout << "ERROR: Invalid Input. the height cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of a pentahedron";
			cout << "---------------------------------------------------------------------------------\n";
			//Process
			areaPen = pow(penlength, 2) + 2 * penlength * sqrt((pow(penlength, 2) / 4) + pow(penheight, 2));
			volPen = (pow(penlength, 2) * penheight) / 3;
			//Output
			cout << "\tEdge length   (l) = " << penlength << "\n";
			cout << "\tHeight        (h) = " << penheight << "\n";
			cout << "\tSurface Area  (A) = " << areaPen << "\n";
			cout << "\tVolume        (V) = " << volPen << "\n";
		}
		break;

	case 4://Polyhedron
		cout << "                            ++++++++++++++++++++4\n";
		cout << "                   +++++++++++++++++++++++++++++4\n";
		cout << "               +++++++++++++++++++++++++444444444\n";
		cout << "          ++++++++++++++++++++++++++/444444444444\n";
		cout << "          .                          444444444444      Polyhedron - rectangular prism which has\n";
		cout << "          .                          444444444444      six faces that are rectangles.It has the\n";
		cout << "          .                          444444444444      same cross - section along a length\n";
		cout << "          .                          444444444444\n";
		cout << "          .                          444444444444\n";
		cout << "          .                          4444444444\n";
		cout << "          .                          4444444\n";
		cout << "          .                          4444\n";
		cout << "          .--------------------------4\n\n";
		cout << "4) Input of a polyhedron\n";
		cout << "-----------------------------------------------------------------------------------------\n";
		double polength, powidth, poheight;
		//Input
		cout << "Enter the length (l) of the rectangular prism: ";
		cin >> polength;
		//Input Validation
		if (polength <= 0)
		{
			cout << "ERROR: Invalid Input. The length cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		powidth;
		cout << "Enter the width (w) of the rectangular prism: ";
		cin >> powidth;
		if (powidth <= 0 || powidth >=polength)
		{
			cout << "ERROR: Invalid Input. The width cannot be negative, equal to zero, greater than or equal to the length. Please try again\n";
			return -1;
		}
		poheight;
		cout << "Enter the height (h) of the rectangular prism: ";
		cin >> poheight;
		if (poheight <= 0)
		{
			cout << "ERROR: Invalid Input. The height cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of Polyhedron\n";
			cout << "---------------------------------------------------------------------------------------\n";
			//Process
			areaPo = 2 * (polength * powidth + powidth * poheight + polength * poheight);
			volPo = polength * powidth * poheight;
			//Output
			cout << "\tLength         (l) = " << polength << "\n";
			cout << "\tWidth          (w) = " << powidth << "\n";
			cout << "\tHeight         (h) = " << poheight << "\n";
			cout << "\tSurface Area   (A) = " << areaPo << "\n";
			cout << "\tVolume         (V) = " << volPo << "\n";
		}
		break;

	case 5://Torus
		cout << "                . . .\n";
		cout << "           .   5 5 5 555\n";
		cout << "         .           5 5 555\n";
		cout << "       .                5 5 55.\n";
		cout << "      .                    5 555\n";
		cout << "     .           55.       5 555\n";
		cout << "    .        55       .    5 5155    Torus - a doughnut - shape formed by revolving a circle.\n";
		cout << "    .        55       .    5 5555    in three - dimensional space about an axis that lies in\n";
		cout << "    .        55       .    5 5555    the same plane as the circle\n";
		cout << "     .           ...5      5 555\n";
		cout << "      ..                  5 555\n";
		cout << "       ... .           5 5 555\n";
		cout << "         ..5 5 5 5 5 5 5 555\n";
		cout << "            5 5 5 5 5 555\n";
		cout << "                5 5 5\n\n";
		cout << "5) Input of Torus\n";
		cout << "----------------------------------------------------------------------------------------------\n";
		double toRadius, toradius;
		//Input
		cout << "Enter the major radius (R) of a doughnut: ";
		cin >> toRadius;
		//Input Validation
		if (toRadius <= 0)
		{
			cout << "ERROR: Invalid Input. The major radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		toradius;
		cout << "Enter the minor radius (r) of a doughnut: ";
		cin >> toradius;
		if (toradius <= 0)
		{
			cout << "ERROR: Invalid Input. The minor radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else if (toradius >= toRadius)
		{
			cout << "ERROR: Invalid Input. Minor radius cannot be equal or bigger than major radius. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of Torus\n";
			cout << "------------------------------------------------------------------------------------------------\n";
			//Process
			areaTo = (2 * PI * toRadius) * (2 * PI * toradius);
			volTo = (PI * pow(toradius, 2) * (2 * PI * toRadius));
			//Output
			cout << "\tMajor Radius: " << toRadius << "\n";
			cout << "\tMinor Radius: " << toradius << "\n";
			cout << "\tSurface Area: " << areaTo << "\n";
			cout << "\tVolume      : " << volTo << "\n";
		}
		break;

	case 6://Hemisphere
		cout << "                *****\n";
		cout << "        **********************\n";
		cout << "    * ***************************      Hemisphere - a perfect half of a sphere\n";
		cout << "    ..  **********************111\n";
		cout << "     ..         ***** 6 6 6 666\n";
		cout << "      ...           6 6 6 6 666\n";
		cout << "       ....  . 6 6 6 6 6 6 666\n";
		cout << "         ..6 6 6 6 6 6 6 666\n";
		cout << "            6 6 6 6 6 666\n";
		cout << "                . . .\n\n";
		cout << " 6) Input of Hemisphere\n ";
		cout << "-----------------------------------------------------------------------------------------------------\n";
		double hemradius;
		//Input
		cout << "Enter the radius of a hemisphere ";
		cin >> hemradius;
		if (hemradius <= 0)
		{
			cout << "ERROR: Invalid Input. The radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of Hemisphere\n";
			cout << "-----------------------------------------------------------------------------------------------------\n";
			//Process
			areaHemSph = 3 * PI * pow(hemradius, 2);
			volHemSph = (2 * PI * pow(hemradius, 3)) / 3;
			cout << "\tRadius         (r) = " << hemradius << "\n";
			cout << "\tDiameter       (d) = " << 2 * hemradius << "\n";
			cout << "\tSurface Area   (A) = " << areaHemSph << "\n";
			cout << "\tVolume         (V) = " << volHemSph << "\n";
		}
		break;

	case 11: //Interactive Input all shapes
		cout << "            . . .\n";
		cout << "        .   1 1 1 111\n";
		cout << "     .           1 1 111\n";
		cout << "   .               1 1 111\n";
		cout << "  .                 1 1 111\n";
		cout << " .                   1 1 111\n";
		cout << "..                   1 1 1111     Sphere - a round object with the same distance\n";
		cout << "..                   1 1 1111     (radius)from its surface to its center\n";
		cout << "..                   1 1 1111\n";
		cout << " ..                1 1 1 111\n";
		cout << "  ...           1 1 1 1 111\n";
		cout << "   ....  . 1 1 1 1 1 1 111\n";
		cout << "     ..1 1 1 1 1 1 1 111\n";
		cout << "        1 1 1 1 1 111\n";
		cout << "            . . .\n\n";
		cout << "1) Input of a sphere\n";
		cout << "------------------------------------------------------------------------------------\n";
		 radius;
		//Input
		cout << "\tEnter a radius of a sphere: ";
		cin >> radius;
		//Input Validation
		if (radius <= 0)
		{
			cout << "ERROR: Invalid Input. Radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of a sphere\n";
			cout << "-------------------------------------------------------------------------------------\n";
			//Process
			areaSph = 4 * PI * pow(radius, 2);
			volSph = (4 * PI * pow(radius, 3)) / 3;
			//Output
			cout << "\tRadius        (r) = " << radius << "\n";
			cout << "\tDiameter      (d) = " << radius * 2 << "\n";
			cout << "\tSurface Area  (A) = " << areaSph << "\n";
			cout << "\tVolume        (V) = " << volSph << "\n\n\n";
		}
		//Tetrahedron
		cout << "                            |\n";
		cout << "                           /|2\n";
		cout << "                          / |222\n";
		cout << "                        /   |2222\n";
		cout << "                      /     |222222\n";
		cout << "                     /      |2222222\n";
		cout << "                   /        |22222222       Tetrahedron - a triangular pyramid with\n";
		cout << "                  /         +2222222222     four faces, edges of equal lengthand angles\n";
		cout << "                /         ..222222222222    of equal size\n";
		cout << "               /      ...........222222222\n";
		cout << "             /    ...................2222222\n";
		cout << "            / ...........................2222\n";
		cout << "          /...................................2\n\n";
		 tetlength;
		//Input
		cout << "2) Input of a Tetrahedron\n";
		cout << "-----------------------------------------------------------------------------------------\n";
		cout << "Enter an edge length (l) of a triangular pyramid: ";
		cin >> tetlength;
		//Input Validation
		if (tetlength <= 0)
		{
			cout << "ERROR: Invalid Input. Edge length cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of a Tetrahedron\n";
			cout << "-----------------------------------------------------------------------------------------\n";
			//Process
			areaTet = sqrt(3) * pow(tetlength, 2);
			volTet = (sqrt(2) * pow(tetlength, 3)) / 12;
			//Output
			cout << "\tEdge length    (l) = " << tetlength << "\n";
			cout << "\tHeight         (h) = " << (sqrt(6) * tetlength) / 3 << "\n";
			cout << "\tSurface Area   (A) = " << areaTet << "\n";
			cout << "\tVolume         (V) = " << volTet << "\n\n\n";
		}

		//Pentahedron
		cout << "    ++++++++++++++++++++++++++3\n";
		cout << "    | ++++++++++++++++++++++/33\n";
		cout << "    |   ++++++++++++++++++/3333\n";
		cout << "    |     ++++++++++++++/333333\n";
		cout << "    |       ++++++++++/33333333\n";
		cout << "    |         ++++++/3333333333\n";
		cout << "    |           ++/333333333333    Pentahedron - a pyramid with square base \n";
		cout << "    |           ++3333333333333    and four triangular faces that are joined\n";
		cout << "    |           /.+333333333333    at a vertex\n";
		cout << "    |         /.....+3333333333\n";
		cout << "    |       /.........+33333333\n";
		cout << "    |     /.............+333333\n";
		cout << "    |   /.................+3333\n";
		cout << "    | /.....................+33\n";
		cout << "    |.........................3\n\n";
		cout << "3) Input of a pentahedron\n";
		cout << "----------------------------------------------------------------------------------------\n";
		 penlength, penheight;
		//Input
		cout << "Enter a edge length (l) of a square pyramid: ";
		cin >> penlength;
		//Input Validation
		if (penlength <= 0)
		{
			cout << "ERROR: Invalid Input. Edge length cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		penheight;
		cout << "Enter the height: ";
		cin >> penheight;
		if (penheight <= 0)
		{
			cout << "ERROR: Invalid Input. the height cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of a pentahedron";
			cout << "---------------------------------------------------------------------------------\n";
			//Process
			areaPen = pow(penlength, 2) + 2 * penlength * sqrt((pow(penlength, 2) / 4) + pow(penheight, 2));
			volPen = (pow(penlength, 2) * penheight) / 3;
			//Output
			cout << "\tEdge length   (l) = " << penlength << "\n";
			cout << "\tHeight        (h) = " << penheight << "\n";
			cout << "\tSurface Area  (A) = " << areaPen << "\n";
			cout << "\tVolume        (V) = " << volPen << "\n\n\n";
		}

		//Polyhedron
		cout << "                            ++++++++++++++++++++4\n";
		cout << "                   +++++++++++++++++++++++++++++4\n";
		cout << "               +++++++++++++++++++++++++444444444\n";
		cout << "          ++++++++++++++++++++++++++/444444444444\n";
		cout << "          .                          444444444444      Polyhedron - rectangular prism which has\n";
		cout << "          .                          444444444444      six faces that are rectangles.It has the\n";
		cout << "          .                          444444444444      same cross - section along a length\n";
		cout << "          .                          444444444444\n";
		cout << "          .                          444444444444\n";
		cout << "          .                          4444444444\n";
		cout << "          .                          4444444\n";
		cout << "          .                          4444\n";
		cout << "          .--------------------------4\n\n";
		cout << "4) Input of a polyhedron\n";
		cout << "-----------------------------------------------------------------------------------------\n";
		 polength, powidth, poheight;
		//Input
		cout << "Enter the length (l) of the rectangular prism: ";
		cin >> polength;
		//Input Validation
		if (polength <= 0)
		{
			cout << "ERROR: Invalid Input. The length cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		powidth;
		cout << "Enter the width (w) of the rectangular prism: ";
		cin >> powidth;
		if (powidth <= 0 || powidth >= polength)
		{
			cout << "ERROR: Invalid Input. The width cannot be negative, equal to zero, greater than or equal to the length. Please try again\n";
			return -1;
		}
		poheight;
		cout << "Enter the height (h) of the rectangular prism: ";
		cin >> poheight;
		if (poheight <= 0)
		{
			cout << "ERROR: Invalid Input. The height cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of Polyhedron\n";
			cout << "---------------------------------------------------------------------------------------\n";
			//Process
			areaPo = 2 * (polength * powidth + powidth * poheight + polength * poheight);
			volPo = polength * powidth * poheight;
			//Output
			cout << "\tLength         (l) = " << polength << "\n";
			cout << "\tWidth          (w) = " << powidth << "\n";
			cout << "\tHeight         (h) = " << poheight << "\n";
			cout << "\tSurface Area   (A) = " << areaPo << "\n";
			cout << "\tVolume         (V) = " << volPo << "\n\n\n";
		}
		

		//Torus
		cout << "                . . .\n";
		cout << "           .   5 5 5 555\n";
		cout << "         .           5 5 555\n";
		cout << "       .                5 5 55.\n";
		cout << "      .                    5 555\n";
		cout << "     .           55.       5 555\n";
		cout << "    .        55       .    5 5155    Torus - a doughnut - shape formed by revolving a circle.\n";
		cout << "    .        55       .    5 5555    in three - dimensional space about an axis that lies in\n";
		cout << "    .        55       .    5 5555    the same plane as the circle\n";
		cout << "     .           ...5      5 555\n";
		cout << "      ..                  5 555\n";
		cout << "       ... .           5 5 555\n";
		cout << "         ..5 5 5 5 5 5 5 555\n";
		cout << "            5 5 5 5 5 555\n";
		cout << "                5 5 5\n\n";
		cout << "5) Input of Torus\n";
		cout << "----------------------------------------------------------------------------------------------\n";
		 toRadius, toradius;
		//Input
		cout << "Enter the major radius (R) of a doughnut: ";
		cin >> toRadius;
		//Input Validation
		if (toRadius <= 0)
		{
			cout << "ERROR: Invalid Input. The major radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		toradius;
		cout << "Enter the minor radius (r) of a doughnut: ";
		cin >> toradius;
		if (toradius <= 0)
		{
			cout << "ERROR: Invalid Input. The minor radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else if (toradius >= toRadius)
		{
			cout << "ERROR: Invalid Input. Minor radius cannot be equal or bigger than major radius. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of Torus\n";
			cout << "------------------------------------------------------------------------------------------------\n";
			//Process
			areaTo = (2 * PI * toRadius) * (2 * PI * toradius);
			volTo = (PI * pow(toradius, 2) * (2 * PI * toRadius));
			//Output
			cout << "\tMajor Radius: " << toRadius << "\n";
			cout << "\tMinor Radius: " << toradius << "\n";
			cout << "\tSurface Area: " << areaTo << "\n";
			cout << "\tVolume      : " << volTo << "\n\n\n";
		}

		//Hemisphere
		cout << "                *****\n";
		cout << "        **********************\n";
		cout << "    * ***************************      Hemisphere - a perfect half of a sphere\n";
		cout << "    ..  **********************111\n";
		cout << "     ..         ***** 6 6 6 666\n";
		cout << "      ...           6 6 6 6 666\n";
		cout << "       ....  . 6 6 6 6 6 6 666\n";
		cout << "         ..6 6 6 6 6 6 6 666\n";
		cout << "            6 6 6 6 6 666\n";
		cout << "                . . .\n\n";
		cout << " 6) Input of Hemisphere\n ";
		cout << "-----------------------------------------------------------------------------------------------------\n";
		hemradius;
		//Input
		cout << "Enter the radius of a hemisphere ";
		cin >> hemradius;
		if (hemradius <= 0)
		{
			cout << "ERROR: Invalid Input. The radius cannot be negative or equal to zero. Please try again\n";
			return -1;
		}
		else
		{
			cout << "\n\n";
			cout << "Output of Hemisphere\n";
			cout << "-----------------------------------------------------------------------------------------------------\n";
			//Process
			areaHemSph = 3 * PI * pow(hemradius, 2);
			volHemSph = (2 * PI * pow(hemradius, 3)) / 3;
			cout << "\tRadius         (r) = " << hemradius << "\n";
			cout << "\tDiameter       (d) = " << 2 * hemradius << "\n";
			cout << "\tSurface Area   (A) = " << areaHemSph << "\n";
			cout << "\tVolume         (V) = " << volHemSph << "\n\n\n";
		}
		break;

	case 12: //Randomize-input all shapes
		srand(time(0));
		radius = rand() % 10 + 0.1;

		tetlength = rand() % 10 + 0.1;

		penlength = rand() % 10 + 0.1;
		penheight = rand() % 10 + 0.1;

		polength = rand() % 10 + 0.1;
		powidth = rand() % 10 + 0.1;
		poheight = rand() % 10 + 0.1;

		toRadius = rand() % 10 + 0.1;
		toradius = rand() % 10 + 0.1;
			
		hemradius = rand() % 10 + 0.1;
		cout << "1) Random generated input of sphere ";
		cout << "----------------------------------------------------------------------------------------------\n";
		cout << "Radius of the sphere : " << radius << "\n\n";
		cout << "2) Random generated input of Tetrahedron ";
		cout << "----------------------------------------------------------------------------------------------\n";
		cout << "Edge length (l) of the triangular pyramid : " << tetlength << "\n\n";
		cout << "3) Random generated input of Pentahedron ";
		cout << "----------------------------------------------------------------------------------------------\n";
		cout << "Edge length (l) of the square pyramid : " << penlength << "\n";
		cout << "Height (h) of the square pyramid      : " << penheight << "\n\n";
		cout << "4) Random generated input of Polyhedron ";
		cout << "----------------------------------------------------------------------------------------------\n";
		cout << "Length (l) of the rectangular prism : " << polength << "\n";
		cout << "width (w) of the rectangular prism  : " << powidth << "\n";
		cout << "height (h) of the rectangular prism : " << poheight << "\n\n";
		if (powidth >= polength)
		{
			cout << "ERROR: Invalid Input. The width cannot be negative, equal to zero, greater than or equal to the length. Please try again\n";
			return -1;
		}

		cout << "5) Random generated input of Torus ";
		cout << "----------------------------------------------------------------------------------------------\n";
		cout << "Major radius (R) of a doughnut : " << toRadius << "\n";
		cout << "Minor radius (r) of a doughnut : " << toradius << "\n\n";
		if (toradius >= toRadius)
		{
			cout << "ERROR: Invalid Input. Minor radius cannot be equal or bigger than major radius. Please try again\n";
			return -1;
		}
		cout << "Random generated input of hemisphere ";
		cout << "----------------------------------------------------------------------------------------------\n";
		cout << "Radius of the hemisphere : " << hemradius << "\n\n\n";

		areaSph = 4 * PI * pow(radius, 2);
		volSph = (4 * PI * pow(radius, 3)) / 3;

		areaTet = sqrt(3) * pow(tetlength, 2);
		volTet = (sqrt(2) * pow(tetlength, 3)) / 12;

		areaPen = pow(penlength, 2) + 2 * penlength * sqrt((pow(penlength, 2) / 4) + pow(penheight, 2));
		volPen = (pow(penlength, 2) * penheight) / 3;

		areaPo = 2 * (polength * powidth + powidth * poheight + polength * poheight);
		volPo = polength * powidth * poheight;

		areaTo = (2 * PI * toRadius) * (2 * PI * toradius);
		volTo = (PI * pow(toradius, 2) * (2 * PI * toRadius));

		areaHemSph = 3 * PI * pow(hemradius, 2);
		volHemSph = (2 * PI * pow(hemradius, 3)) / 3;

		cout << "Summary Report\n";
		cout << "==============================================================================================\n\n";
		cout << "Shape           Surface Area(A)         Volume(V)\n";
		cout << "------------    ----------------        ---------------\n";
		cout << "Sphere     \t" << areaSph << "\t\t" << volSph << "\n";
		cout << "Tetrahedron\t" << areaTet << "\t\t" << volTet << "\n";
		cout << "Pentahedron\t" << areaPen << "\t\t" << volPen << "\n";
		cout << "Polyhedron  \t" << areaPo << "\t\t" << volPo << "\n";
		cout << "Torus       \t" << areaTo << "\t\t" << volTo << "\n";
		cout << "Hemisphere  \t" << areaHemSph << "\t\t" << volHemSph << "\n\n\n";
		if (areaSph < areaTet && areaSph < areaPen && areaSph < areaPo && areaSph < areaTo && areaSph < areaHemSph)
		{
			cout << "*The smallest object is sphere\n";
		}
		else if (areaTet < areaSph && areaTet < areaPen && areaTet < areaPo && areaTet < areaTo && areaTet < areaHemSph)
		{
			cout << "*The smallest object is Tetrahedron\n";
		}
		else if (areaPen < areaSph && areaPen < areaTet && areaPen < areaPo && areaPen < areaTo && areaPen < areaHemSph)
		{
			cout << "*The smallest object is Pentahedron\n";
		}
		else if (areaPo < areaSph && areaPo < areaTet && areaPo < areaPen && areaPo < areaTo && areaPo < areaHemSph)
		{
			cout << "*The smallest object is Polyhedron\n";
		}
		else if (areaTo < areaSph && areaTo < areaTet && areaTo < areaPen && areaTo < areaPo && areaTo < areaHemSph)
		{
			cout << "*The smallest object is Torus\n";
		}
		else if (areaHemSph < areaSph && areaHemSph < areaTet && areaHemSph < areaPen && areaHemSph < areaPo && areaHemSph < areaTo)
		{
			cout << "*The smallest object is Tetrahedron\n";
		}
		if (areaSph > areaTet && areaSph > areaPen && areaSph > areaPo && areaSph > areaTo && areaSph > areaHemSph)
		{
			cout << "**The biggest object is sphere\n";
		}
		else if (areaTet > areaSph && areaTet > areaPen && areaTet > areaPo && areaTet > areaTo && areaTet > areaHemSph)
		{
			cout << "**The biggest object is Tetrahedron\n";
		}
		else if (areaPen > areaSph && areaPen > areaTet && areaPen > areaPo && areaPen > areaTo && areaPen > areaHemSph)
		{
			cout << "**The biggest object is Pentahedron\n";
		}
		else if (areaPo > areaSph && areaPo > areaTet && areaPo > areaPen && areaPo > areaTo && areaPo > areaHemSph)
		{
			cout << "**The biggest object is Polyhedron\n";
		}
		else if (areaTo > areaSph && areaTo > areaTet && areaTo > areaPen && areaTo > areaPo && areaTo > areaHemSph)
		{
			cout << "**The biggest object is Torus\n";
		}
		else if (areaHemSph > areaSph && areaHemSph > areaTet && areaHemSph > areaPen && areaHemSph > areaPo && areaHemSph > areaTo)
		{
			cout << "**The biggest object is Tetrahedron\n";
		}
		break;
	}
	return 0;
}
